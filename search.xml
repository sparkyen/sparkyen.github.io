<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>二分法</title>
    <url>/posts/3510.html</url>
    <content><![CDATA[<h2 id="整数集合上的二分"><a href="#整数集合上的二分" class="headerlink" title="整数集合上的二分"></a>整数集合上的二分</h2><p>在单调递增序列中查找&gt;&#x3D;x的数中的最小的一个</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findUpperId</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">>=</span>x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
		<span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>在单调递增序列中查找&lt;&#x3D;x的数中的最大的一个</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findLowerId</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> 
		<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;=</span>x<span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>
		<span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<p>如上面两段代码所示，这种二分写法可能会有两种形式:</p>
<ol>
<li>缩小范围时，r &#x3D; mid，l &#x3D; mid + 1，取中间值时，mid &#x3D; (l+ r)&#x2F;2。</li>
<li>缩小范围时，l &#x3D; mid，r &#x3D; mid -1，取中间值时，mid &#x3D; (l+r+ 1)&#x2F;2。</li>
</ol>
<p>如果不对mid 的取法加以区分，例如第二段代码假如也采用mid &#x3D;(l+r)&#x2F;2,那么当r-l等于1时，就有mid&#x3D; l(l+r)&#x2F;2]&#x3D; l。接下来若进入 l &#x3D; mid分支,可行区间未缩小,造成死循环;若进入r &#x3D; mid -1分支,造成l&gt;r,循环不能以l &#x3D;&#x3D; r结束。例如在数组[1, 2, 4, 7]寻找&lt;&#x3D;5的中最大的一个数。</p>
<p>因此对两个形式采用配套的mid取法是必要的。上面两段代码所示的两个形式共同组成了这种二分的实现方法。对两个形式采用配套的mid取法是必要的,上面两段代码所示的两个形式共同组成了这种二分的实现方法。  </p>
<p>仔细分析这两种mid的取法，我们还发现:<br>mid&#x3D;(l+r)&#x2F;2不会取到r这个值， mid&#x3D;(l+r+ 1)&#x2F;2 不会取到l这个值。<br><strong>可以利用这一性质来处理无解的情况，把最 初的二分区间[1,n] 分别扩大为[1,n+1] 和[0,n], 把a数组的一个越界的下标包含进来。如果最后二分终止于扩大后的这个越界下标上,则说明a中不存在所求的数。</strong> 总而言之，正确写出这种二分的流程是: </p>
<ol>
<li>通过分析具体问题，确定左右半段哪一个是可行区间，以及mid归属哪一半段。  </li>
<li>根据分析结果，选择“r&#x3D;mid, l&#x3D; mid +1, mid&#x3D;(l+r)&#x2F;2”和“I &#x3D; mid, r&#x3D; mid-1, mid&#x3D;(l+r+ 1)&#x2F;2”两个配套形式之一。  </li>
<li>二分终止条件是l &#x3D;&#x3D; r，该值就是答案所在位置。</li>
</ol>
<p>使用的这种二分方法的优点是始终保持答案位于二分区间内，二分结束条件对应的值恰好在答案所处位置，还可以很自然地处理无解的情况,形式优美。唯一的缺点是由两种形式共同组成，需要认真考虑实际问题选择对应的形式。</p>
<h2 id="实数域上的二分"><a href="#实数域上的二分" class="headerlink" title="实数域上的二分"></a>实数域上的二分</h2><p>需要保留k位小数时，精度eps一般取eps&#x3D;10^-(k+2)。但eps不要取得太小，否则会因为浮点小数精度的原因陷入死循环 </p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">></span><span class="token number">1e-5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cal</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
	<span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>有时精度不容易确定或表示，就干脆采用循环固定次数的二分方法，也是一种相当不错的策略。这种方法得到的结果的精度通常比设置eps更高。  </p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cal</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
	<span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>
<h2 id="二分答案转化为判定"><a href="#二分答案转化为判定" class="headerlink" title="二分答案转化为判定"></a>二分答案转化为判定</h2><p><strong>把求最优解的问题，转化为给定一个值mid，判定是否存在一个可行方案评分达到mid的问题。</strong> 假设最优解的评分是S,显然对于所有&gt; S的值，都不存在一个合法的方案达到该评分，否则就与S的最优性矛盾;而对于所有&lt;S的值，一定存在一个合法的方案达到或超过该评分，因为最优解就满足这个条件。这样问题的 值域就具有一种特殊的单调性一在 S的一侧合法、在S的另一侧不合法，就像一个 在(-∞,S] 上值为1，在(S, +∞)上值为0的分段函数，可通过二分找到这个分界点 S。借助二分，我们把求最优解的问题，转化为给定一个值mid, 判定是否存在一个可 行方案评分达到mid的问题。接下来我们通过一个经典的例子理解上述概念。</p>
<blockquote>
<p>有$N$本书排成一行，已知第$i$本书的厚度是$A_i$。把他们分成连续的$M$组，使$T$最小化，其中$T$表示厚度之和最大的一组的厚度。</p>
</blockquote>
<p><strong>题目中描述中出现了类似于“最大值最小”的含义，这是答案具有单调性，可用二分转化为判定的最常见、最典型的特征之一。</strong> 相应地，假设最终答案为S，因为S的最优性，如果要求每组的厚度都&lt;S，那么这M组一定不能容纳这些书，可能需要更多的组才能把书分完， 也就意味着对于本题的限制条件不存在可行的分书方案。如果每组的厚度可以&gt; S,那么一-定存在一种分书方案使得组数不会超过M。最优解就处于分书可行性的分界点上。</p>
<pre class="language-c" data-language="c"><code class="language-c">bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> group<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>rest<span class="token operator">=</span>size<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>rest<span class="token operator">>=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> rest<span class="token operator">-=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> group<span class="token operator">++</span><span class="token punctuation">,</span>rest<span class="token operator">=</span>size<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> group<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>sum_of_ai<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cout<span class="token operator">&lt;&lt;</span>l<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <tags>
        <tag>二分</tag>
        <tag>算法</tag>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>NOI暑假培训</tag>
      </tags>
  </entry>
  <entry>
    <title>关于压力和表现的思考</title>
    <url>/posts/52838.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接受了很多年的应试教育，对于该如何考试心里我倒是摸的门清，知道该如何把控考试的紧张、兴奋度，平时该怎么学、最后该预留多少时间复习等等。但是除此以外，别的事情挨到了身上，最终结果并不是每次都那么如意。其中有的只是小小的事情很快就过去了，比如某次上篮没上进下次手再抬高点就可以了，而有的却涉及到个人的幸福和生活之类，是不可逆转的。</p>
<p>面对各类繁琐的事情怎么去做，这是一个慢慢学习的过程，但是我认为同样的重要的是到底该抱着一种怎么样的心态去面对周围的一切。而压力是影响我们心态的因素中很大的一块版图，因此我要在这里谈谈压力对我们表现的影响及其对我们解决问题的指导意义</p>
<h2 id="Yerkes-Dodson-定律"><a href="#Yerkes-Dodson-定律" class="headerlink" title="Yerkes-Dodson 定律"></a>Yerkes-Dodson 定律</h2><p>Yerkes-Dodson 定律是压力和表现之间的经验关系，最初由心理学家Robert M. Yerkes和John Dillingham Dodson于 1908 年开发。 该定律规定，表现仅在一定程度上会随着生理或精神唤醒而增加 ；当唤醒水平变得太高时，表现就会下降。该过程通常以图形方式显示为钟形曲线，随着唤醒水平的提高，该曲线增加然后减少。</p>
<p>研究人员发现，不同的任务需要不同程度的唤醒才能获得最佳表现。例如，困难或智力要求高的任务可能需要较低水平的唤醒（以促进集中），而需要耐力或毅力的任务可能会在较高的唤醒水平下更好地执行（以增加动力）。</p>
<p>由于任务差异，曲线的形状可能会高度可变。对于简单或学习良好的任务，这种关系是单调的，并且随着唤醒的增加，性能会提高。对于复杂的、不熟悉的或困难的任务，在某一点之后，唤醒与绩效之间的关系会发生逆转，之后绩效会随着唤醒的增加而下降。</p>
<p>任务难度的影响导致假设 Yerkes-Dodson 定律可以分解为两个不同的因素，就像浴缸曲线一样。倒 U 形的向上部分可以被认为是唤醒的激励作用。下降部分是由唤醒（或压力）对认知过程（如注意力、记忆力和解决问题的负面影响造成的。<br><img data-src="/../images/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/765px-OriginalYerkesDodson.svg.png"></p>
<p>上述结论可以由我们的原始数据得到：<br><img data-src="/../images/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/547px-OriginalYerkesDodsonData.svg.png"></p>
<h2 id="其他观点"><a href="#其他观点" class="headerlink" title="其他观点"></a>其他观点</h2><p>逆转理论展示心理如何在双稳态而不是稳态原则上运作，以此来积极反对耶克斯-多德森定律。尽管两者在某些方面持有不同观点，当然我也没有仔细研究，不过我仍然觉得他能够给我们带来很多启示。</p>
<p>每个领域都由一对相反的价值观或动机组成，因此在任何给定时刻，每一对中的一个都可以被体验到。域中的每一对代表两种相反形式的动机——每对中一次只能激活一个状态。人类在每对中的状态之间反转取决于许多因素，包括我们采用一种风格而不是另一种风格的固有倾向。</p>
<h3 id="严肃-x2F-好玩-Serious-x2F-Playful"><a href="#严肃-x2F-好玩-Serious-x2F-Playful" class="headerlink" title="严肃&#x2F;好玩(Serious&#x2F;Playful)"></a>严肃&#x2F;好玩(Serious&#x2F;Playful)</h3><p>手段-目的领域中的两种状态被称为“Serious”和“Playful”，指的是一个人是出于成就还是对过程的享受。尽管状态通常以严肃和嬉戏为特征，但在这一领域中最真实的区别在于，一个人是出于长期目标还是出于当前正在发生的事情。未来的成就还是现在的享受？旅程还是目的地？</p>
<h3 id="双稳态"><a href="#双稳态" class="headerlink" title="双稳态"></a>双稳态</h3><p>人类总是在寻找一种完美的中等唤醒状态，而任何一个方向都过于极端的想法是不可取的，即无聊或焦虑。</p>
<p>逆转理论提出了一种完全不同的唤醒观点，即所谓的“双稳态”。双稳态强调特征音调中的极性，这由“蝴蝶曲线”图形的曲线表示。它表明唤醒在每个状态下都以不同的方式经历——实际上是相反的方式，并且有自己独特的情绪范围。在用实线表示的严肃（Serious）状态下，这个范围是从放松到焦虑，而在用虚线表示的好玩的Playful）状态下，这个范围是从无聊到兴奋。<br><img data-src="/../images/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%83%B3/800px-Reversal_theory_butterfly_curves.png"></p>
<p>在Serious的状态下，当威胁或要求的事件提高唤醒水平时，一个人会变得焦虑，但在完成一项任务时会愉快地放松。在Playful状态下，一个人变得愉快地兴奋，因为一个人变得更加情绪化和被唤醒，但如果缺乏刺激，就会感到无聊。</p>
<h2 id="心理学理论给我们带来的启示"><a href="#心理学理论给我们带来的启示" class="headerlink" title="心理学理论给我们带来的启示"></a>心理学理论给我们带来的启示</h2><p>回过头来看，确实要懂点心理学来指导我们的生活。我们在面对生活中较为简单的事情的时候可以让自己更加兴奋一点，这样通常完成的效率会很高，例如形策报告和练车等等。但是面对一些较为难以实现的目标或者是复杂的事情的时候，可能就需要降低期望，以较为平和的心态来面对，例如学术成就、财富自由等等，这样才会对我们的表现起到较好的影响作用。<strong>当然事物并不是两极性的，不同事情有着不同的最佳动机点，面对越繁杂的任务，就应当越放轻松，以求无为而有所为</strong></p>
<hr>
<p>参考文章:<br><a href="https://en.wikipedia.org/wiki/Yerkes%E2%80%93Dodson_law">耶克斯-多德森定律</a><br><a href="https://en.wikipedia.org/wiki/Reversal_theory#Bistability">逆转理论</a><br><a href="https://www.zhihu.com/question/38347269/answer/76058392">为什么说「太用力的人走不远」？</a><br><a href="https://www.douban.com/group/topic/266061480/?_i=52262078d6f67a0&dt_dapp=1&dt_platform=com.douban.activity.wechat_friends">当你发现没有什么是“一定的”，心态就会很好 </a></p>
]]></content>
      <tags>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>感想</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划—线性DP</title>
    <url>/posts/52610.html</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>算法</tag>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>NOI暑假培训</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划—区间DP</title>
    <url>/posts/13045.html</url>
    <content><![CDATA[<p>区间类动态规划是线性动态规划的扩展，其中一个状态往往由若干个比它更小且包含它的区间的状态转移而来。</p>
<ul>
<li><strong>特征</strong>：能将问题分解为能两两合并的形式，能将两个或多个部分进行整合。</li>
<li><strong>求解</strong>：对整个问题设最优值，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。</li>
</ul>
<p>这里以<a href="https://www.luogu.com.cn/problem/P1775">洛谷-P1775 石子合并（弱化版）</a> 为例说明，根据题意可以将$f[i][j]$表示为把第$i$堆到第$j$堆的石头合并为一堆的最优值，求出$f[1][n]$即为答案。将第$i$堆到第$j$堆的石头合并为一堆前，必然会有这样的一个过程：<strong>将区间左边的合为一堆、区间右边合为一堆，最后再将左右两堆合为一堆</strong>。因此区间长度更长的信息一定由区间长度更短的信息转移得到，因此我们需要将区间短的信息先求出来，之后通过中间的划分点来枚举转移的最优值。最后需要注意递推边界的初始化：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//INF</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//初始化 </span>
<span class="token punctuation">&#125;</span> 
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//状态: 左端点 </span>
		<span class="token keyword">int</span> r <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//状态: 右端点 </span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//决策 </span>
			f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+=</span> sum<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>假设这里石头并不是一条链而是围成一个圆环，那么这时将这些石子合并的最优值该怎么求解呢？</p>
<p>我们将这条链延长两倍，变成$2*n$堆，这样就能枚举到所有将环分开成链的位置，如下所示：</p>
<p>$$1 \quad 2\quad 3\quad 4 \quad … \quad n \quad 1 \quad 2\quad 3 \quad 4 \quad …. \quad n$$<br>求解后取$f(1,n), f(2, n+1), …, f(n, n+n-1)$中的最优值，即为最后的答案。这里以<a href="https://www.luogu.com.cn/problem/P1880">洛谷-P1880 [NOI1995] 石子合并</a>说明：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> sum<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token operator">?</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">int</span> minRes <span class="token operator">=</span> inf<span class="token punctuation">,</span> maxRes <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
			<span class="token keyword">int</span> r <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  
			<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>l<span class="token operator">-</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> 
				g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">[</span>l<span class="token operator">-</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> 
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>		
			f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+=</span> sum<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+=</span> sum<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>sum<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				minRes <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minRes<span class="token punctuation">,</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				maxRes <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxRes<span class="token punctuation">,</span> g<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d"</span><span class="token punctuation">,</span> minRes<span class="token punctuation">,</span> maxRes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>

<p>将以上内容弄清楚后，可以以<a href="https://www.luogu.com.cn/problem/P1063">洛谷-P1063 [NOIP2006 提高组] 能量项链</a>为练习试试看自己是否掌握，这题需要注意合并价值的计算方法即可：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>	
	<span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> r <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
				f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>a<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span>n<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>


<hr>
<p>参考自:<br><a href="https://oi-wiki.org/dp/interval/">区间 DP</a><br>《信息学奥赛一本通》<br>《算法竞赛进阶指南》</p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>NOI暑假培训</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划—背包问题</title>
    <url>/posts/58047.html</url>
    <content><![CDATA[<h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放</p>
<p>我们可以将$f(i, j)$表示把$1,2,…,i$个物品装到容量为$j$的背包的最大总重量,答案是$d[n][m]$，解释如下：</p>
<p><strong>只考虑第 $i$件物品的策略（放或不放）</strong>，那么就可以转化为一个只和前 $i−1$ 件物品相关 的问题。</p>
<p>如果不放第$i$件物品，那么问题就转化为“前 $i−1$ 件物品放入容量为 $j$ 的背 包中”，价值为 $f[i−1,j]$。可以这样思考的原因在于我本来第$i$件物品就不放，那么把前$i$件物品放入容量为$j$的背包里和把前$i-1$件物品放入容量为$j$的背包里本质是一回事，所以前者状态可以由后者转移得到。</p>
<p>如果放第 $i$ 件物品，那么问题就转化为“前$i−1$ 件物品放 入剩下的容量为$j-w[i]$ 的背包中”, 价值为$f[i-1][j-w[i]]+v[i]$，原因同理。</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 1-1-1</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//许边读边读入计算而不必保存 </span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//第i件物品放不进去</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>w<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span></code></pre>

<p>我们还可以将$f(i, j)$表示把$i,i+1,…,n$个物品装到容量为$j$的背包的最大总重量,答案是$d[1][m]$</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 1-1-2</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">==</span>n<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>d<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h3><p>可以使用滚动数组优化空间，但是导致只有最后一个阶段的状态值，不好打印解。不过就算是二维数组仍然不能保证是最小字典序的解（字典序是从前往后的），因为是逆向打印。</p>
<p>需特别注意的是递推过程种要倒着遍历保证当前为$i$时$f[j]$都是$f[i-1][j]$</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 1-1-3</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//需要倒着遍历保证当前为i时f[j]都是f[i-1][j] </span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>v<span class="token punctuation">)</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="输出方案"><a href="#输出方案" class="headerlink" title="输出方案"></a>输出方案</h3><p>记录路径有两种方式，一是根据结果逆推得出，二是在递推的求解过程中就记录下来。这里以<a href="https://vjudge.net/problem/UVA-624">UVA-624 CD</a> 为例题来说明：</p>
<ol>
<li><p>由dp结果往回逆推</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 1-2-1</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//逆推得出</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> m<span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		res<span class="token punctuation">[</span>id<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		c <span class="token operator">-=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum:%d\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>递推求解过程中记录</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 1-2-2</span>
<span class="token comment">//初始化 </span>
<span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token comment">/*
		对于测试样例 45 8 4 10 44 43 12 9 8 2
		取>=的结果：4 10 12 9 8 2 sum:45
		取>的结果：43 2 sum:45
		只有取>=才能保证字典序最小 
		*/</span> 
		<span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//记录路径</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>
		j <span class="token operator">-=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum:"</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></code></pre></li>
</ol>
<h3 id="输出最小字典序的路径"><a href="#输出最小字典序的路径" class="headerlink" title="输出最小字典序的路径"></a>输出最小字典序的路径</h3><ol>
<li>需要将$f(i, j)$表示把$i,i+1,…,n$个物品装到容量为$j$的背包的最大总重量。由于$f(i, \square )$是由$f(i+1, \square )$转移的来，这样打印解的时候需要从前往后，碰到符合条件的物品直接装入包中，符合最小字典序的定义</li>
<li>保证只要能够选取当前物品$i$就尽可能选取，如上方UVA-624 CD 代码 code 1-2-2注释所示。由于后向前递推，这样能保证选取到序号靠前的物品</li>
</ol>
<p>可以自行在<a href="https://www.acwing.com/problem/content/description/12/">AcWing-12 背包问题求具体方案</a>进行测试，限定条件更多情况下的最优解则需要在递推求解过程中记录，而不能由dp结果往回逆推，因为这样只能保证字典序最小而无法对其他限定条件进行处理，以<a href="https://vjudge.net/problem/HDU-6083">HDU-6083 度度熊的午饭时光</a>为例说明：</p>
<p><strong>题目要求优先级：价值总和(大) &gt; 序列总和(小) &gt; 字典序(小)</strong><br>$dp[j-w[i]]+v[i]&gt;dp[j]$保证价值总和大的物品被选，相同时$sum[j-w[i]]+i&lt;sum[j]$保证序列总和小的物品被选（这里$sum[i][j]$表示$i,i+1,…,n$个物品装到容量为$j$的背包序列和，可以节省空间变为$sum[j]$），第二关键字相同时$sum[j-w[i]]+i&#x3D;&#x3D;sum[j]$保证字典序最小</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 1-3-1</span>
<span class="token comment">//ref: #22475787 | yfsyfs's solution for [HDU-6083] (https://vjudge.net/solution/snapshot/22475787)</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//初始化 </span>
<span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//第一关键字 </span>
			dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">;</span>
			path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//第一关键字相同 </span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token operator">&lt;=</span>sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//比较第二关键字 </span>
				sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">;</span>
				path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		res<span class="token punctuation">[</span>id<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
		j <span class="token operator">-=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case #%d:\n"</span><span class="token punctuation">,</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> i<span class="token operator">!=</span>id<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span><span class="token char">' '</span><span class="token operator">:</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="求方案总数"><a href="#求方案总数" class="headerlink" title="求方案总数"></a>求方案总数</h3><p>状态转移方程已经考察了所有可能的背包组成方案，利用如下递推式即可：<br>$$f[i][j] &#x3D; f[i − 1][j]+ f[i-1][j −v[i]]$$</p>
<p>这里以<a href="https://www.acwing.com/problem/content/11/">AcWing-11 背包问题求方案数</a>说明：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// code 1-4-1</span>
<span class="token comment">// ref: https://www.acwing.com/solution/content/11494/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> g<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//把0个物品放入容量为j的背包里，初始化方案数为1</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> w<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> w <span class="token operator">>></span> v<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//sitution1.选择第i个物品 </span>
                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">)</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>g<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span> <span class="token comment">//sitution 2选择+不选择 第i个物品 </span>
			<span class="token comment">//sitution 3不选择第i个物品 (g[i][j]=g[i-1][j]) </span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    cout<span class="token operator">&lt;&lt;</span> g<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p>这里和01背包的区别就在于每件物品有无数件可用，最朴素的解法就是我可以循环遍历看看我用几件物品才能使得当前价值最大，但显然其时间复杂度非常高：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 2-1-1</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>j<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
			f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>而我们通过仔细观察发现：01背包中$f[i][j]$由 $f[i-1][j]$和$f[i-1][j-w[i]]$ 递推而来是为了保证第$i$件物品只选一次而现在第$i$件物品可以选无限件 ，正好需要可能已经选入第$i$件物品的$f[i][j-w[i]]$</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 2-1-2</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> </code></pre>

<p>同理这里也<strong>可以使用滚动数组优化，只是需要注意代码与01背包问题的伪代码只有$j$的循环次序不同而已</strong>。01背包问题中要按照$j&#x3D;m..0$的逆序来循环，是为了保证第$i$次循环中的状态$f[i][j]$是由状态$f[i-1][j-w[i]]$递推而来。其中为了确保每件物品只选一次,在考虑“选入第$i$件物品”这件策略时依据的是一个绝无已经选入第$i$件物品的子结果$f[i-1][j-w[i]$。而现在完全背包的特点恰是每种物品可选无限件,所以在考虑“加选一件第$i$种物品”这种策略时,却正需要一个可能已选入第$i$种物品的子结果$f[i][v一w[i]]$，所以就可以并且必须采用$j&#x3D;0..m$的顺序循环。这就是这个简单的程序为何成立的道理：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 2-1-3</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>


<p>完全背包可以<a href="https://vjudge.net/problem/51Nod-2649/origin">51Nod-2649 完全背包</a>为例题来练手，不同的解法时间复杂度不同，如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 2-2-1</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//solution 1: TLE</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
			f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//solution 2: AC_78ms</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//solution 3: AC_31ms</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> 
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p>多重背包与完全背包的区别在于进一步限定了每件物品可以选择的数量，这里以<a href="https://vjudge.net/problem/51Nod-1086/origin">51Nod-1086 背包问题 V2</a>为例题来说明。</p>
<p>同样的我们可以选择和完全背包一样的朴素做法，枚举第$i$件物品选择多少件能够使得当前总价值最大：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 3-1-1</span>
<span class="token comment">/*
多重背包朴素做法 AC: 593ms
但是需要输入后 再利用数据进行递推, 否则边输入边运算会超时, 非常的玄学 
*/</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e4</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//weight, value, count</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
				dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token operator">*</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="二进制拆分优化"><a href="#二进制拆分优化" class="headerlink" title="二进制拆分优化"></a>二进制拆分优化</h3><p>细心观察发现，朴素做法是把每件物品拆成了$c[i]$件，这样的目的是为了枚举取物品的所有可能方案。而我们知道一个十进制整数能被若干个2的整数次幂相加得到，如$2^0, 2^1, 2^2, …,2^{k-1}, c[i]-2^k+1$得到，在此证明略。</p>
<p>因此通过这种形式我们同样能够枚举出取第$i$件物品的所有可能方案，枚举次数由$O(n)$降至$O(log \ n)$。具体做法是将每件物品最大可用数量拆分后，每段单独作为一个新物品，后面的写法则和01背包相同。</p>
<p>每段单独作为一个新物品后，若仍然使用二维数组计算的话，那么第一维的物品数会增加很多，甚至超出内存，严重时无法用于问题求解：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 3-2-1</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e4</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//weight, value, count 由于n*log2(k)大概有800多则只开110的空间不够 </span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//这里开800直接MLE爆空间了, 往小了会TLE而不是WA  </span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> tw<span class="token punctuation">,</span> tv<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tw<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//将原来的n*k组拆为n*log2(k)组 </span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>tc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token operator">*</span>tw<span class="token punctuation">,</span> v<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token operator">*</span>tv<span class="token punctuation">;</span>
			tc <span class="token operator">-=</span> k<span class="token punctuation">,</span> k <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> tc<span class="token operator">*</span>tw<span class="token punctuation">,</span> v<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tc<span class="token operator">*</span>tv<span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span></code></pre>

<p>在这种情况下，我们必须使用滚动数组来对空间进行优化：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 3-2-2</span>
<span class="token comment">/*
多重背包二进制优化 AC: 46ms
需要注意二进制分组后的数据范围 
*/</span> 
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">5e4</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//weight, value, count 由于n*log2(k)大概有800多则只开110的空间不够 </span>
<span class="token comment">// 并且空间开小后显示TLE而不是WA </span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">800</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> tw<span class="token punctuation">,</span> tv<span class="token punctuation">,</span> tc<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tw<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//将原来的n*k组拆为n*log2(k)组 </span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>tc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token operator">*</span>tw<span class="token punctuation">,</span> v<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token operator">*</span>tv<span class="token punctuation">;</span>
			tc <span class="token operator">-=</span> k<span class="token punctuation">,</span> k <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//也可以这样写 </span>
<span class="token comment">//		for(int j = 1; j &lt; tc; j &lt;&lt;= 1)&#123;</span>
<span class="token comment">//			w[cnt] = j*tw, v[cnt] = j*tv;</span>
<span class="token comment">//			cnt++, tc -= j;</span>
<span class="token comment">//		&#125;</span>
		w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> tc<span class="token operator">*</span>tw<span class="token punctuation">,</span> v<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tc<span class="token operator">*</span>tv<span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
			f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="使用混合背包求解"><a href="#使用混合背包求解" class="headerlink" title="使用混合背包求解"></a>使用混合背包求解</h3><p>在多重背包中，虽然限制了物品的数量，但是如果数量 * 重量 &gt;&#x3D; 总重量，则可以考虑完全背包；否则二进制拆分考虑01背包的做法。</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 3-3-1</span>
<span class="token comment">/*
混合背包做法   ref: https://www.cnblogs.com/Draymonder/p/7358254.html
AC: 46ms / 边输入边有时候处理 78ms (玄学)
*/</span> 
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">50100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    	<span class="token keyword">int</span> w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
    	cin <span class="token operator">>></span> w <span class="token operator">>></span> v <span class="token operator">>></span> c<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token operator">*</span>c <span class="token operator">></span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//如果  数量*重量 >= 总重量，考虑完全背包</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> w<span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">//否则  考虑01背包二进制写法</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">&lt;</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            	<span class="token comment">//拆分时我们就可以按照01背包求解</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span>j <span class="token operator">>=</span> w<span class="token operator">*</span>k<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token operator">*</span>k<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                c <span class="token operator">-=</span> k<span class="token punctuation">,</span> k <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span>j <span class="token operator">>=</span> w<span class="token operator">*</span>c<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token operator">*</span>c<span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h2><p>分组背包指的是物品被划分为$k$组，而每组中的物品互相冲突，最多选一件。</p>
<p>01背包和其相比，相当于每组只有一个物品。因此同样的我们还是用$f[k, j]$表示前$k$组物品装到容量为$j$的背包的最大总重量，只是限定每组选一件，但是不知道会选哪一件，需要枚举这组中每一件物品计算能够得到的最大价值数。这里以<a href="https://vjudge.net/problem/%E6%B4%9B%E8%B0%B7-P1757/origin">洛谷-P1757 通天之分组背包</a>为例来说明：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 4-1-1</span>
<span class="token comment">/*
分组背包+ 滚动数组优化 
*/</span> 
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
		a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token keyword">int</span> id <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>w<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//				cout &lt;&lt; f[k][j] &lt;&lt; " ";</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//滚动数组优化 </span>
<span class="token comment">//		for(int j = m; j >=0; j--)&#123;</span>
<span class="token comment">//			for(int i = 1; i &lt;= a[k][0]; i++)&#123;</span>
<span class="token comment">//				int id = a[k][i];</span>
<span class="token comment">//				if(j>=w[id]) dp[j] = max(dp[j], dp[j-w[id]]+v[id]);</span>
<span class="token comment">//			&#125;</span>
<span class="token comment">//		&#125; </span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	printf("%d", dp[m]);</span>
<span class="token punctuation">&#125;</span> </code></pre>


<h2 id="二维费用背包"><a href="#二维费用背包" class="headerlink" title="二维费用背包"></a>二维费用背包</h2><p>二维费用的背包问题指的是：对于每件物品，具有两种不同的费用，并且选择这件物品必须同时付出这两种代价。</p>
<p>费用增加了一维，只需状态增加一维即可。我们用$f[i][j][k]$表示前$i$件物品 付出两种费用分别为$j$和$k$时可获得的最大价值，递推式如下：<br>$$f[i][j][k] &#x3D; max(f[i-1][j][k], f[i-1][j-w1[i]][k-w2[i]]+v[i])$$</p>
<p>同样的我们可以使用滚动数组优化空间，这里以<a href="https://vjudge.net/problem/%E6%B4%9B%E8%B0%B7-P1855/origin">洛谷-P1855 榨取kkksc03</a>为例题说明：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//code 5-1-1</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> n<span class="token punctuation">,</span> M<span class="token punctuation">,</span> T<span class="token punctuation">,</span> m<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">210</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//朴素解法 68ms</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        		<span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">>=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        			f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span> 
		<span class="token comment">// 滚动数组优化 43ms </span>
<span class="token comment">//        for(int j = M; j >= m[i]; j--)</span>
<span class="token comment">//	        for(int k = T; k >= t[i]; k--)&#123;</span>
<span class="token comment">//	            dp[j][k] = max(dp[j][k], dp[j-m[i]][k-t[i]]+1);</span>
<span class="token comment">//	        &#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token comment">//    printf("%d", dp[M][T]);</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>NOI暑假培训</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/posts/61237.html</url>
    <content><![CDATA[<h2 id="选择排序、插入排序、冒泡排序"><a href="#选择排序、插入排序、冒泡排序" class="headerlink" title="选择排序、插入排序、冒泡排序"></a>选择排序、插入排序、冒泡排序</h2><p>这三类算法都比较简单，相对应的时间复杂度也较高，为$O(n^2)$</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每次找出第$i$小的元素（也就是$A_i, A_{i+1},…, A_n$中最小的元素），然后将这个元素与数组第$i$个位置上的元素交换。</p>
<p>下面以<a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-350">计蒜客-350 选择排序</a>为例说明其具体实现：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> id <span class="token operator">=</span> i<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> id <span class="token operator">=</span> j<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token operator">==</span>i<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>


<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序（Bubble sort）是一种简单的排序算法。由于在算法的执行过程中，较小的元素像是气泡般慢慢「浮」到数列的顶端，故叫做冒泡排序。</p>
<p>它的工作原理是每次检查相邻两个元素，如果前面的元素与后面的元素满足给定的排序条件，就将相邻两个元素交换。当没有相邻的元素需要交换时，排序就完成了。因此冒泡排序最多需要扫描$n-1$遍数组就能完成排序。</p>
<p>有一种考法就是要求求出冒泡排序中元素的交换次序，如<a href="https://vjudge.net/problem/%E6%B4%9B%E8%B0%B7-P1116">洛谷-P1116 车厢重组</a>：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e4</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
				<span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token comment">//	for(int i = 1; i &lt;= n; i++)</span>
<span class="token comment">//		printf("%d ", a[i]);</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>

<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序（Insertion sort）是一种简单直观的排序算法。它的工作原理为将待排列元素划分为“已排序”和“未排序”两部分，每次从“未排序的”元素中选择一个插入到“已排序的”元素中的正确位置。</p>
<p>以<a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-A1044">计蒜客-A1044 排序</a>为例说明其具体实现，实现细节见注释：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e4</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	        <span class="token keyword">int</span> key <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//待排序第一个元素</span>
	        <span class="token keyword">int</span> i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//代表已经排过序的元素最后一个索引数</span>
	        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	            <span class="token comment">//从后向前逐个比较已经排序过数组，如果比它小，则把后者用前者代替，</span>
	            <span class="token comment">//其实说白了就是数组逐个后移动一位,为找到合适的位置时候便于Key的插入</span>
	            a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	            i<span class="token operator">--</span><span class="token punctuation">;</span>
	        <span class="token punctuation">&#125;</span>
	        a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span><span class="token comment">//找到合适的位置了，赋值,在i索引的后面设置key值。</span>
	    <span class="token punctuation">&#125;</span>
	    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	    	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	    		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    		i<span class="token operator">!=</span>n <span class="token operator">?</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    		i<span class="token operator">!=</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	    
	<span class="token punctuation">&#125;</span>
	
<span class="token punctuation">&#125;</span></code></pre>


<h2 id="计数排序、桶排序、基数排序"><a href="#计数排序、桶排序、基数排序" class="headerlink" title="计数排序、桶排序、基数排序"></a>计数排序、桶排序、基数排序</h2><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>计数排序(Counting Sort)是一种O(n)的排序算法，其思路是开一个长度为<code>maxValue-minValue+1</code>的数组，然后</p>
<ol>
<li>分配。扫描一遍原始数组，以当前值-<code>minValue</code>作为下标，将该下标的计数器增1。</li>
<li>收集。扫描一遍计数器数组，按顺序把值收集起来。</li>
</ol>
<p>举个例子，<code>nums=[2, 1, 3, 1, 5]</code>, 首先扫描一遍获取最小值和最大值，<code>maxValue=5</code>, <code>minValue=1</code>，于是开一个长度为5的计数器数组<code>counter</code>，</p>
<ol>
<li>分配。统计每个元素出现的频率，得到<code>counter=[2, 1, 1, 0, 1]</code>，例如<code>counter[0]</code>表示值<code>0+minValue=1</code>出现了2次。</li>
<li>收集。<code>counter[0]=2</code>表示<code>1</code>出现了两次，那就向原始数组写入两个1，<code>counter[1]=1</code>表示<code>2</code>出现了1次，那就向原始数组写入一个2，依次类推，最终原始数组变为<code>[1,1,2,3,5]</code>，排序好了。</li>
</ol>
<p>计数排序本质上是一种特殊的桶排序，当桶的个数最大的时候，就是计数排序。</p>
<p>下面以<a href="https://www.luogu.com.cn/problem/P1059">P1059 [NOIP2006 普及组] 明明的随机数</a>为例来说明其具体实现：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
计数排序 
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> x<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
		b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span> </code></pre>


<h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>
<ol>
<li>在额外空间充足的情况下，尽量增大桶的数量</li>
<li>使用的映射函数能够将输入的 $n$ 个数据均匀的分配到 $k$ 个桶中</li>
</ol>
<p>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p>
<p>元素分布在桶中：<br><img data-src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_1.svg_.png"></p>
<p>然后，元素在每个桶中排序：<br><img data-src="https://www.runoob.com/wp-content/uploads/2019/03/Bucket_sort_2.svg_.png"></p>
<p>当输入的数据可以均匀的分配到每一个桶中最快，当输入的数据被分配到了同一个桶中最慢。</p>
<p>以下是具体实现方法：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> x<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> id <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
		b<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>b<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxn<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	
<span class="token punctuation">&#125;</span> </code></pre>


<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>基数排序（Radix sort）是一种非比较型的排序算法，最早用于解决卡片排序的问题。</p>
<p>它的工作原理是将待排序的元素拆分为 $k$个关键字（比较两个元素时，先比较第一关键字，如果相同再比较第二关键字……），然后先对第$k$关键字进行稳定排序，再对第$k-1$关键字进行稳定排序，再对第$k-2$关键字进行稳定排序……最后对第一关键字进行稳定排序，这样就完成了对整个待排序序列的稳定排序。</p>
<p><img data-src="https://oi-wiki.org/basic/images/radix-sort-1.png" alt="一个基数排序的流程" title="一个基数排序的流程"></p>
<p>这样做的原因是：在数学中, 数位越高,数位值对数的大小的影响就越大。如果要从高位排序, 那么次高位的排序会影响高位已经排好的大小关系. </p>
<p>基数排序需要借助一种 <strong>稳定算法</strong> 完成内层对关键字的排序。</p>
<p>通常而言，基数排序比基于比较的排序算法（比如快速排序）要快。但由于需要额外的内存空间，因此当内存空间稀缺时，原地置换算法（比如快速排序）或许是个更好的选择。</p>
<p>基数排序确定了一个基数$radix$，用于确定以$radix$进制的方式进行排序。分析可得到其时间复杂度为$O(n*k)$，空间复杂度为$O(n+radix)$在理论上，当我们选择的$radix$越大，$k$越小，基数排序的效率会越高。 所以，在实际运用中，我们往往不会用10来做基数。同时，因为$radix$越大，其空间复杂度也会变大，所以，要找到一个空间与时间的平衡点。 在32位无符号整型的排序中，我们一般用$2^8$来做$radix$的值。</p>
<p>下面以<a href="https://www.luogu.com.cn/problem/P1177">洛谷 P1177 【模板】快速排序</a>为例题说明其实现方法，详细部分见注释：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span> </span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//桶排的桶</span>
<span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//临时数组，用于桶排元素的储存</span>
    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//目前的位</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//循环次数</span>
    	<span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> radix<span class="token punctuation">;</span><span class="token comment">//获取当前位的数字</span>
            cnt<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//记录该数字出现的次数</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	        <span class="token comment">/*
	        前缀和处理后，cnt变为当前数字后一个数在构成的序列中的排名。
	        例如 [0, 1, 0, 2, 1, 3]代表 1出现1次, 3出现两次.... // 1 3 3 4 5 5 5
			其前缀和数组为[0, 1, 1, 3, 4, 7] 
	        */</span>
            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">/*
        为保证排序的稳定性，此处循环i应从n到1
  		即当两元素关键字的值相同时，原先排在后面的元素在排序后仍应排在后面
  		*/</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> radix<span class="token punctuation">;</span>
            tmp<span class="token punctuation">[</span><span class="token operator">--</span>cnt<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于把tmp中排好序的数列赋给了data，但是比直接复制要快许多。</span>
        p <span class="token operator">*=</span> radix<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">radixSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="三者比较"><a href="#三者比较" class="headerlink" title="三者比较"></a>三者比较</h3><p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>
<ul>
<li>基数排序：根据键值的每位数字来分配桶；</li>
<li>计数排序：每个桶只存储单一键值；</li>
<li>桶排序：每个桶存储一定范围的数值</li>
</ul>
<h2 id="快速排序、归并排序"><a href="#快速排序、归并排序" class="headerlink" title="快速排序、归并排序"></a>快速排序、归并排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><hr>
<p>参考自：<br><a href="https://oi-wiki.org/basic/sort-intro/">排序简介</a></p>
<p><a href="https://soulmachine.gitbooks.io/algorithm-essentials/content/java/sorting/counting-sort/">计数排序</a><br><a href="https://www.runoob.com/w3cnote/bucket-sort.html">1.9 桶排序</a><br><a href="https://www.runoob.com/w3cnote/radix-sort.html">1.10 基数排序</a><br><a href="https://oi-wiki.org/basic/radix-sort/">基数排序</a><br><a href="https://www.luogu.com.cn/blog/MaxDYF/ji-shuo-pai-xu-du-liu-ka-chang">基数排序——毒瘤卡常</a><br><a href="https://www.cnblogs.com/sun/archive/2008/06/26/1230095.html">算法总结系列之五: 基数排序(Radix Sort)</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>NOI暑假培训</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构基础</title>
    <url>/posts/17555.html</url>
    <content><![CDATA[<h2 id="前言—为什么我们需要数据结构"><a href="#前言—为什么我们需要数据结构" class="headerlink" title="前言—为什么我们需要数据结构"></a>前言—为什么我们需要数据结构</h2><p>我们需要数据结构呢？ 为什么要设计这么多数据结构？数据结构到底解决了我们什么样的问题？</p>
<p>我们提到数据结构时，一般是指计算机科学中的一个概念， 但是从本质上讲，数据结构应该是指对数据的一种组织方式。既然如此，我们没必要非在计算机科学领域中讨论 概念本身，把它放在其它领域中，可能更能加强我们的理解。</p>
<p>就说图书管吧，假如你是一名很久很久以前的图书馆管理员，那时候根本没什么计算机。数据结构？那是什么？</p>
<p>你的任务就是看着图书馆里的一堆书。于是，有一天，图书馆来了一堆书，你把他们堆成一堆，放在馆里。 这时候，有人来借书了，他只能在那一堆书里乱翻，翻来翻去也找不到自己想要的书，因为那是一堆书， 有的书他检查了很多次，有的一次也没检查。</p>
<blockquote>
<p>这时候这堆书是一个集合，不方便遍历。</p>
</blockquote>
<p>时间长了，抱怨的人很多。</p>
<p>作为一个怕麻烦的管理员，你忍受不了别人的抱怨，于是，你把那 <strong>一堆书</strong> 变成了 <strong>一排书</strong>。</p>
<p>这下好了，来找书的人，只要从书架左边走到右边，按顺序找就好了。只要书在图书馆里，慢慢找总是可以找到。 但是，随着图书馆的书越来越多，这样找实在是太慢了，因为每次都要从第一本书找到最后一本书。</p>
<blockquote>
<p>这时候这堆书是一个列表，方便遍历，但是不方便查找。</p>
</blockquote>
<p>时间长了，抱怨的人很多。</p>
<p>作为一个怕麻烦的管理员，你忍受不了别人的抱怨，于是，你把那 <strong>一排书</strong> 变成了 <strong>很多类书</strong>。</p>
<p>那么，按什么分类呢？按书的大小么？颜色么？退一步讲，分类的依据是什么？</p>
<p>分类是为了加快读者查找书的速度，那么读者查找书的时候，是按什么查找呢？是按书名。所以，我们对书名分类。 按书名分类也有许多种，按书名读音么？按书名笔画吗？按书名字数么？我们很容易想到，按读音分类给读者的压力最小， 也就是查找前的开销最小。否则每次找书之前还要数一下笔画，读者一定又会抱怨。</p>
<p>这时候，我们按读音把书分类，书名第一个字是A的在A书架，是B的在B书架。这下读者查找书的速度大大加快了， 因为一下子就能排除那么多类书，而代价仅仅是想一下书名第一个字的读音。不过，我们马上又发现，有的书架上书实在太多了， 那有什么关系？这个问题我们解决过啊，只要再分类就好了，书名第一个字我们用过了，现在用第二个字。</p>
<p>读者终于大致可以满意了。</p>
<blockquote>
<p>这时候这些书架构成了一个查找树，方便查找。</p>
</blockquote>
<p>另外，我们注意到，其实对于管理员来说，他的负担是增加了的，比如新来了一本书，如果图书馆是一堆书， 只要把新书扔在那一堆里就好了，如果是一排书，要把新书放在这排书的最后，而如果是分好类的书架， 管理员就要先找到这本书的位置，再把新书放在那儿，而不能随便放。好在分类后，我们找新书位置不会花多久， 假如分好类后，读者查找书方便了，但是管理员要把新书放在合适的位置，需要花一年时间， 那这个分类的方法肯定不是一个好方法。</p>
<p>这告诉我们</p>
<blockquote>
<p>维护数据结构很重要。</p>
</blockquote>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种“先进后出”的线性数据结构，其只能在一端进行插入和删除操作。我们可以使用一个数组和一个变量（记录栈顶位置）来实现栈结构。</p>
<p>下面UVA-514 Rails、UVA-673 Parentheses Balance为例说明基础应用：</p>
<p><a href="https://vjudge.net/problem/UVA-514">UVA-514 Rails</a><br>思考过程如下图和代码注释所示：<br><img data-src="/../images/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F%E6%A0%88.png"></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
目标序列可按照进栈顺序1~n出栈形成，需判断目标序列是否合理 
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> target<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>
			<span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> B <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//注意输入细节 </span>
			<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> ok <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span><span class="token punctuation">(</span>B<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token comment">//下面两行if和else if判断目标编号是否匹配栈顶元素</span>
				<span class="token comment">//栈顶元素可以是当前的栈顶，也可以进栈元素压栈后成为新的栈顶 </span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token operator">==</span>target<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span> 
					A<span class="token operator">++</span><span class="token punctuation">,</span> B<span class="token operator">++</span><span class="token punctuation">;</span>
				<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>target<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span>
					s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B<span class="token operator">++</span><span class="token punctuation">;</span>
				<span class="token comment">//不匹配则可以进栈 </span>
				<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span>
					s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>A<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">//若无元素进栈且又找不到目标编号说明编号顺序不合理 </span>
				<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					ok <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> ok<span class="token operator">?</span><span class="token string">"Yes"</span><span class="token operator">:</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//注意格式 </span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><a href="https://vjudge.net/problem/UVA-673">UVA-673 Parentheses Balance</a></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* 
使用栈判断括号序列是否合理 
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span> 
	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> stk<span class="token punctuation">;</span>
        <span class="token function">gets</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'('</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">')'</span><span class="token operator">||</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'['</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">']'</span><span class="token punctuation">)</span>
                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="表达式的计算"><a href="#表达式的计算" class="headerlink" title="表达式的计算"></a>表达式的计算</h3><p>栈对求表达式求值有着特殊的作用，以<a href="https://vjudge.net/problem/UVA-442">UVA-442 Matrix Chain Multiplication</a>为例说明：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
计算表达式 
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span> </span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Matrix</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
	<span class="token function">Matrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>m<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
stack<span class="token operator">&lt;</span>Matrix<span class="token operator">></span> s<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">char</span> name<span class="token punctuation">;</span>
		cin <span class="token operator">>></span> name<span class="token punctuation">;</span>
		<span class="token keyword">int</span> k <span class="token operator">=</span> name <span class="token operator">-</span> <span class="token char">'A'</span><span class="token punctuation">;</span>
		cin <span class="token operator">>></span> m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">>></span> m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	string expr<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>expr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> len <span class="token operator">=</span> expr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">bool</span> error <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token char">'A'</span><span class="token operator">&lt;=</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token char">'Z'</span><span class="token punctuation">)</span>
				s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>expr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">')'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				Matrix m2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				Matrix m1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>b<span class="token operator">!=</span>m2<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					error <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
					<span class="token keyword">break</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				ans <span class="token operator">+=</span> m1<span class="token punctuation">.</span>a<span class="token operator">*</span>m1<span class="token punctuation">.</span>b<span class="token operator">*</span>m2<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
				s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Matrix</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> m2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种“先进先出的”线性数据结构，一般来说，元素从左端进入队列，需从右端离开队列。我们称队列的左端为队头,右端为队尾。可以在C++中用一个数组和两个变量（记录队头和队尾的位置）来实现队列结构。</p>
<p>元素进行多次入队、出队后，用于实现队列结构的数组的开头部分空间就会被严重浪费，所以我们经常将其优化为“循环队列”，也就是把队列看作一个首尾相接的环，只要队列中的元素个数在任意时刻都不超过环长,那么随着入队和出队操作的进行,存储元素的那一段位置就像沿着环不停地移动，重复利用着历史上曾被占用过的空间。C++ STL中的queue就是一个循环队列，也是我们在代码中最常见的队列实现方式。</p>
<p>下面分别以<a href="https://vjudge.net/problem/UVA-540">UVA-540 Team Queue</a>为例说明其基础应用：</p>
<p>我们用队列数组存储每一个小团队的队列，然后再加一个队列来存储各个团队的队列</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
有 t 个小组排队，每个小组有若干人.
当一个人入队时，如果队伍中已有与他同一队伍的人，那么这个人就插到同一队伍人的最后，否则插到队伍最后.
先给出若干入队和出队指令，要求输出出队顺序.
*/</span> 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> team<span class="token punctuation">[</span><span class="token number">10000100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">,</span> num<span class="token punctuation">,</span> x<span class="token punctuation">,</span> ca <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Scenario #%d\n"</span><span class="token punctuation">,</span> <span class="token operator">++</span>ca<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                team<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'S'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'E'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>team<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>team<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//q[0]队列用于记录当前操作的队伍编号 </span>
                q<span class="token punctuation">[</span>team<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            	<span class="token keyword">int</span> top <span class="token operator">=</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//上个入队的队伍编号 </span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                q<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>


<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表相较于数组来说，可以更加灵活的进行修改操作(插入和删除)，只需要花费O(1)的时间，但是查找就需要O(n)的时间，其适用于在修改操作频繁的要求。因此我们要学会根据需求灵活选择适合的数据结构。</p>
<p>下面分别以<a href="https://vjudge.net/problem/UVA-11988">UVA-11988 Broken Keyboard</a>为例说明其基础应用：</p>
<p>这题开始想着可以用思维法做，但是尝试过后发现中括号[]之间还可以叠加中括号[]和穿插字符，这让处理变得有些麻烦，还不如用链表直观简单</p>
<p>使用STL库：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
list<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> l<span class="token punctuation">;</span>
string str<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        l<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'['</span><span class="token punctuation">)</span> it <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">']'</span><span class="token punctuation">)</span> it <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> l<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span>it <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> l<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>模拟链表的方法：<br><img data-src="/../images/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A51.png"><br><img data-src="/../images/%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A52.png"></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring></span> </span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> last<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> nxt<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		last <span class="token operator">=</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
		nxt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//链表的头节点 </span>
		<span class="token comment">// cur用于记录新节点插入链表的位置 </span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'['</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">']'</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> last<span class="token punctuation">;</span>
			<span class="token comment">//模拟链表插入操作 </span>
			<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nxt<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//第一步 </span>
				nxt<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//第二步 </span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>last<span class="token punctuation">)</span> last <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//若在尾部插入则更新尾id的标记 </span>
				cur <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">//第三步(移动光标) </span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token comment">//链表输出</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%c"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<hr>
<p>参考自：<br><a href="http://minixalpha.github.io/%E6%80%9D%E6%83%B3/2013/10/26/whyds.html">为什么我们需要数据结构</a><br>《深入浅出程序设计竞赛（基础篇）》<br>《算法竞赛入门经典》<br>《算法竞赛进阶指南》</p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>NOI暑假培训</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>是结束，也是开始</title>
    <url>/posts/44849.html</url>
    <content><![CDATA[<p>今年经历了很多的事情，其中大部分写在我本地文档中，不必在这细谈了。现在所有事情的安排正在形成良好的体系，希望能够通过阅读和写作帮助我思考，尽量做到知行合一。目前确定了所有笔记、感想首先使用obsidian管理写在本地，把其中能够公开的内容里最重要、最想发表交流的放在网上。现在的情况就是我要走的路，然后以下是经历了这么多之后我写给自己看的指路标，尽管不能保证以后一定会绕开或者避免错误，但是能够降低其发生的概率：</p>
<ol>
<li><p>为人做事要更加有原则，如交友方面要留个心眼并交真正的朋友，自爱且洁身自好，相信自己的直觉</p>
</li>
<li><p>多进行各种尝试，通过各种方式客观并充分的了解自己、认识这个世界，如旅游，学习、生活、玩耍等（当然不要越过个人底线），增补自己的价值观序列，并通过各种“游戏”锻炼自己</p>
</li>
<li><p>阅读、观看书籍和影视</p>
<ul>
<li>思维工具类<br>如批判性思维等，给自己的一些思维活动提供指导</li>
<li>人文社科类<br>了解经济、人文、地理、历史等知识，正如“读史以明智，知古以鉴今”，以便客观的认知自己所处的环境和境遇（如当今社会、人生阶段、所处位置的风俗等）</li>
<li>专业知识类<br>由主干到枝叶，全面认识整个学科并精通于某一方向，以便对所学专业有一个较为客观的认知，并探索适合自己的道路</li>
</ul>
</li>
<li><p>培养良好的生活、学习、思考、写作习惯，而不是靠一时的想法，如：</p>
<ul>
<li>常整理内务</li>
<li>构建知识体系，定期规划、整理、回顾等等</li>
</ul>
<p>通过这样的方式形成自己的思维和知识体系</p>
</li>
<li><p>培养良好的情绪，不过分焦虑、紧张等等，可以通过劳逸结合等方法实现，这样才能在遇到问题时较为冷静的去分析解决问题（《教育知识与能力》P192和《谈冷静》写到了这点）</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心法</title>
    <url>/posts/19408.html</url>
    <content><![CDATA[<p>贪心法就是遵循某种规律，不断选取当前最优策略的算法设计方法，其适用的前提是：局部最优策略能导致产生全局最优解。一般可以通过反证法和数学归纳法来大致证明其有效性。</p>
<h3 id="HDU-2037-今年暑假不AC【区间问题】"><a href="#HDU-2037-今年暑假不AC【区间问题】" class="headerlink" title="HDU-2037 今年暑假不AC【区间问题】"></a>HDU-2037 今年暑假不AC【区间问题】</h3><p><strong>题意</strong><br>有$n$项工作，每项工作分别在$s_i$时间开始，在$t_i$时间结束。对于每项工作，你都可以选择参与与否。如果选择了参与，那么自始至终都必须全程参与。此外，参与工作的时间段不能重叠（即使是开始的瞬间和结束的瞬间的重叠也是不允许的)。你的目标是尽可能多的工作，那么最多能参加多少项工作呢？<br><img data-src="/../images/%E7%AE%97%E6%B3%95/HDU-2037%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p>
<p><strong>思路</strong><br>我们可以想到两种解法：<br>(1) 每次选取用时最短的工作<br>(2) 每次选取结束时间最短的工作<br>上述(2)可以用反证法证明错误:<br><img data-src="/../images/%E7%AE%97%E6%B3%95/HDU-2037%E5%8F%8D%E4%BE%8B.png"><br>而(1)我们认为结束时间越早，以后可选的工作也就越多</p>
<p><strong>代码</strong></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pii</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> 
pii work<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token operator">&amp;&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>work<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> <span class="token operator">&amp;</span>work<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">sort</span><span class="token punctuation">(</span>work<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> work<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//		printf("%d %d\n", work[i].second, work[i].first);</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>work<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">>=</span>last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				last <span class="token operator">=</span> work<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>
				ans<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> </code></pre>


<h3 id="POJ-3617-Best-Cow-Line【字典序最小问题】"><a href="#POJ-3617-Best-Cow-Line【字典序最小问题】" class="headerlink" title="POJ-3617 Best Cow Line【字典序最小问题】"></a>POJ-3617 Best Cow Line【字典序最小问题】</h3><p><strong>题意</strong><br>给定长度为N的字符串S,要构造一个长度为N的字符串T。起初，T是一个空串，随后反复进行下列任意操作：</p>
<ul>
<li>从S的头部删除一个字符，加到T的尾部</li>
<li>从S的尾部删除一个字符，加到T的尾部<br>目标是要构造字典序“尽可能小的字符串T。<br><img data-src="/../images/%E7%AE%97%E6%B3%95/POJ-3617%20%E6%93%8D%E4%BD%9C%E7%A4%BA%E4%BE%8B%E5%9B%BE.png"></li>
</ul>
<p><strong>思路</strong><br>从字典序的性质上看，无论T的末尾有多大，只要前面部分的较小就可以。所以我们可以试一下如下贪心算法:</p>
<ul>
<li>不断取$S$的开头和末尾中较小的一个字符放到$T$的末尾。</li>
</ul>
<p>这个算法已经接近正确了，只是针对$S$的开头和末尾字符相同的情形还没有定义。<strong>在这种情形下，因为我们希望能够尽早使用更小的字符，所以就要比较下一个字符的大小</strong>。下一 一个字符也有可能相同，因此就有如下算法:</p>
<ul>
<li>按照字典序比较$S$和将$S$反转后的字符串$S^{‘}$。</li>
<li>如果$S$较小，就从$S$的开头取出一个文字，追加到$T$的末尾。</li>
<li>如果$S^{‘}$较小，就从$S$的末尾取出一个文字，追加到$T$的末尾。<br>(如果相同则取哪个都可以)</li>
</ul>
<p>根据前面提到的性质，字典序比较类的问题经常能用得上贪心法。</p>
<p><strong>代码</strong></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> q <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">&lt;=</span>q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">bool</span> left <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">+</span>i<span class="token operator">&lt;</span>q<span class="token operator">-</span>i<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
			<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>s<span class="token punctuation">[</span>q<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				left <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">></span>s<span class="token punctuation">[</span>q<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> 
				<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span> ans<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> ans<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>q<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">80</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">)</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="POJ-3069-Saruman’s-Army"><a href="#POJ-3069-Saruman’s-Army" class="headerlink" title="POJ-3069 Saruman’s Army"></a>POJ-3069 Saruman’s Army</h3><p><strong>题意</strong><br>直线上有$N$个点。点$i$的位置是$X_i$。从这$N$个点中选择若千个，给它们加上标记。对每一个点，其距离为$R$以内的区城里必须有带有标记的点(自己身带有标记的点，可以认为与其距离为0的地方有一个带有标记的点)。 在满足这个条件的情况下，希望能为尽可能少的点添加标记。请问至少要有多少点被加上标记?<br><img data-src="/../images/%E7%AE%97%E6%B3%95/POJ-3069%20%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p>
<p><strong>思路</strong><br>我们可以让这条直线上点的尽可能的被不相交的半径为$r$的圆给覆盖，这样可以达到覆盖效率的最大化。具体到代码编写上，可以先从最左边的点开始覆盖$r$以内的点并找到标记点，再覆盖标记点右边$r$以内的点，依次往下形成若干个不相交的圆。</p>
<p><strong>代码</strong></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">1e3</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
<span class="token keyword">int</span> dis<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>r<span class="token operator">>></span>n <span class="token operator">&amp;&amp;</span> r<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> dis<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> s <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token operator">+</span>r<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> p <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> p<span class="token operator">+</span>r<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
			ans<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span> </code></pre>

]]></content>
      <tags>
        <tag>算法</tag>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>NOI暑假培训</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度计算</title>
    <url>/posts/61946.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于整数，我们平常会使用int类型进行数据运算，再大一点的我们可以使用long long int，那么再大一点呢，就没有能够使用的基本数据类型满足我们的要求了。这个时候就需要用到高精度算法了，其实本质上是用数组将每一位都储存起来，进行加减运算的时候手动模拟运算的过程，最终得到结果。</p>
<h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">||</span> q<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> tmp <span class="token operator">+=</span> a<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> tmp <span class="token operator">+=</span> b<span class="token punctuation">[</span><span class="token operator">--</span>q<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>
		c<span class="token punctuation">[</span>id<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">,</span> tmp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>减法需要注意的是，如果是小数a减大数b，那么会得到负数，我们会先用大数b减去小数a，再补上负号即可。</p>
<pre class="language-c" data-language="c"><code class="language-c">bool <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> lena <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> lenb <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>lena<span class="token operator">!=</span>lenb<span class="token punctuation">)</span> <span class="token keyword">return</span> lena<span class="token operator">></span>lenb<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lena<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> true<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
1314 1267
123 123
5 5 少考虑了一种情况，即答案为 00 时，程序不会输出
*/</span>
<span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cmp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">sub</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		tmp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token operator">--</span>p<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token operator">-</span>tmp<span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> tmp <span class="token operator">-=</span> b<span class="token punctuation">[</span><span class="token operator">--</span>q<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>
		c<span class="token punctuation">[</span>id<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
		tmp <span class="token operator">=</span> tmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>id<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> id <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//删除前导0 </span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>类似加法,可以用竖式求乘法。如下图所示：<br><img data-src="/../images/%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97%E4%B9%98%E6%B3%95.png"><br>在做乘法运算时,同样也有进位,同时对每一位进行乘法运算时,必须进行错位相加。分析c数组下标的变化规律,可以写出如下关系式：<br>$$c_i&#x3D;c_i^{‘}+ c_i^{‘’},+…$$<br>由此可见$c_i$跟$a[i]* b[j]$乘积有关,跟上次的进位有关,还跟原$c_i$的值有关,分析下标规律有：</p>
<pre class="language-c" data-language="c"><code class="language-c">c<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span>＋x＋c<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
x<span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">%=</span><span class="token number">10</span><span class="token punctuation">;</span></code></pre>

<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/*
12 12 
0 123
*/</span>
<span class="token keyword">void</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id <span class="token operator">=</span> p<span class="token operator">+</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
			c<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token operator">+</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token operator">+</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			c<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
			c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>id<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> id<span class="token operator">--</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> id<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>模拟除法竖式即可，不过需要注意的是当被除数num为最大范围1e9时，除数可能为9e9超出int范围需要将其定义为long long ，参考<a href="https://www.luogu.com.cn/discuss/293101?page=2">讨论区</a></p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/*
高精度整数除以单精度整数的商和余数
9000000000 1000000000

*/</span>
<span class="token keyword">void</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> c<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	ll r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
		r <span class="token operator">=</span> r<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>
		c<span class="token punctuation">[</span>id<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token operator">/</span>num<span class="token punctuation">;</span>
		r <span class="token operator">%=</span> num<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	bool flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> id <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">==</span>id<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
		
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>NOI暑假培训</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>转载：对计算机科学的反思</title>
    <url>/posts/38145.html</url>
    <content><![CDATA[<blockquote>
<p>作者：李国杰</p>
</blockquote>
<p>从第1台电子计算机问世到现在已经60年了,尽管计算机科学和技术继续保持高速发展的态势，但是<strong>计算机科学与技术不能再采用以往一样的方式发展，需要革命性的突破。</strong>如果一直顺着过去形成的惯性发展，计算机科学的路子可能会越走越窄。我们需要静下心来，认真进行反思，总结经验和教训，以便将来更快更好地发展。</p>
<h2 id="计算机科学的迷途"><a href="#计算机科学的迷途" class="headerlink" title="计算机科学的迷途"></a>计算机科学的迷途</h2><h3 id="1．计算机科学不应以把解决方案搞复杂为荣"><a href="#1．计算机科学不应以把解决方案搞复杂为荣" class="headerlink" title="1．计算机科学不应以把解决方案搞复杂为荣"></a>1．计算机科学不应以把解决方案搞复杂为荣</h3><p>普遍认为，计算机科学是“算法的科学”。美国计算机学会（ACM）对计算机科学有如下的定义：Computer Science as the “systematic study of algorithmic processes that describe and transform information: their theory, analysis, design, efficiency, implementation and application”。算法研究应该是计算机科学的重要内容，但是从某些意义上讲，<strong>计算机科学“成也算法，败也算法”。</strong></p>
<p>计算机科学有两个基础：可计算性和计算复杂性。可惜，目前学习可计算性的主要兴趣在证明某些问题不可计算；学习计算复杂性的主要兴趣在证明NP困难问题。在其他学科中很少见到科学家对不可解或实际上几乎不可解的问题有这么大的兴趣。电子工程科学真正帮助了电路设计，如芯片设计的EDA工具在集成电路产业发展中功不可没。但计算机科学并没有大大减轻编软件的困难，软件设计理论的确需要革命性的突破。</p>
<p>上世纪70年代有一本书《计算机和不可解性（Computers and Intractability）》，作者是M. R. Garey和D. S. Johnson，很多学校都采用作为本科高年级或研究生教材，影响很大。这本书的扉页上有一张漫画，漫画中一个人说：这个问题我不能解决，但是你也不能解决，因为它是NP完全问题。说话那个人表现出十分得意的样子。这幅漫画影响了计算机界几十年，从事计算机科学研究的人对解决不了实际需要攻克的困难问题一般不会有任何内疚，因为这是大家都解决不了的NP问题。这种导向对计算机科学已产生了不好的影响。我们真正需要的不是发现一些理论上复杂的问题，而是要在用户满意的前提下尽可能有效地解决实际存在的复杂问题。<strong>计算机科学不应以把解决方案搞复杂为荣，尽可能用简单方法处理复杂问题是信息技术的生存之道</strong>。</p>
<h3 id="2．应当重视确定可有效求解的问题边界"><a href="#2．应当重视确定可有效求解的问题边界" class="headerlink" title="2．应当重视确定可有效求解的问题边界"></a>2．应当重视确定可有效求解的问题边界</h3><p>我们做的研究工作多数是改进前人的算法或理论模型，至于沿着已开辟的方向究竟还有多大改进的余地却很少考虑，很可能这一方向已到了可有效求解的问题边界，而另一方向有很广阔的改进空间我们反而没有触及。</p>
<p>15年前，美国纽约大学的施瓦茨（Schwartz）教授在智能中心做过一个报告。他说，数学上已知的（knowable）问题边界极不规则（如图1所示）。就像油田开采一样，在某个位置钻井有油，偏离一点就没有油。问题的可解性也很类似，某个问题在某些条件下是易解的，但是如果条件稍微改变一点点就很难解甚至不可解了。<strong>确定可有效求解的问题边界，应该是计算机科学的重要内容。</strong></p>
<p><img data-src="http://www.ict.ac.cn/liguojiewenxuan_162523/wzlj/lgjjs/201912/W020191227653419843594.jpg"></p>
<p><strong>图1 数学上已知的问题边界极不规则</strong></p>
<h3 id="3．并行处理不是万能药"><a href="#3．并行处理不是万能药" class="headerlink" title="3．并行处理不是万能药"></a>3．并行处理不是万能药</h3><p>并行计算的成功与逐步普及容易使人产生错觉，只要是单机难以解决的问题就想求助于并行计算机，但并行计算并不是万能药。</p>
<p>计算机算法大致上可分成三类：（1）线性或几乎是线性复杂性的算法，如分类（sorting）、商务处理等；（2）多项式或较低的指数复杂性算法，如矩阵运算等；（3）指数复杂性算法，如各种模式转换、规划（planning）等。第一类算法一般可用微机或服务器实现；第二类算法和问题规模大或有实时要求的第一类算法需要并行计算机。已知的第二类算法几乎都是科学计算。超级计算对第三类算法帮助不大，加速100万倍也只能稍稍扩大求解问题规模，需要寻找新的思路。</p>
<p>线性提高并行处理能力不可能对付指数增长的组合爆炸问题（NP问题）。解决人工智能等问题的非确定算法（如搜索算法）在并行处理中，会出现加速比远远超过处理机数的异常现象（好的异常），但我的博士论文《组合搜索的并行处理（Parallel Processing for Combinatorial Search）》已经证明，好的异常和坏的异常（并行不如串行）要么都存在，要么都不存在。除非能开发出指数增长的并行处理能力，否则用生物计算机的所谓海量并行也不可能有效地解决组合爆炸问题。<strong>解决人工智能等组合爆炸问题的根本出路在于对所求解问题本身的深入理解。</strong></p>
<h2 id="计算机科学不仅要研究复杂性，还要研究“简单性”"><a href="#计算机科学不仅要研究复杂性，还要研究“简单性”" class="headerlink" title="计算机科学不仅要研究复杂性，还要研究“简单性”"></a>计算机科学不仅要研究复杂性，还要研究“简单性”</h2><h3 id="1．复杂性与简单性"><a href="#1．复杂性与简单性" class="headerlink" title="1．复杂性与简单性"></a>1．复杂性与简单性</h3><p>大多数理论计算机科学家热衷于发现人为的难题，而不是寻求有效的方法解决实际问题。我们不仅需要刻画问题困难程度的“复杂性理论”，计算机科学可能更需要建立“简单性理论”，即如何发现最简单的方法去解决实际问题。由于易解问题的边界极不规则，我们特别需要一种理论指导算法设计者选择努力的方向，需要知道往某一方向努力理论上还有多大的改进空间。</p>
<p>例如，热力学中有一个著名的卡诺循环（Carnot Cycle），其理论表述很简单：</p>
<p>卡诺效率（Carnot Efficiency） &#x3D; 1 – Tc&#x2F;Th</p>
<p>Tc和Th分别代表热机工作环境的低温和高温。这一极简单的定律对热机的设计起到非常大的作用。但是，在计算机科学里似乎从未见过这样简洁的对实际设计有指导意义的公式。</p>
<h3 id="2．驾驭复杂性是信息技术创新的基本问题"><a href="#2．驾驭复杂性是信息技术创新的基本问题" class="headerlink" title="2．驾驭复杂性是信息技术创新的基本问题"></a>2．驾驭复杂性是信息技术创新的基本问题</h3><p>人工智能领域权威学者布鲁克斯（Brooks）说过：“<strong>复杂性是致命的敌人</strong>。”系统复杂性研究已成为21世纪最重要的科学内容，但计算机领域的科研人员对这一最活跃的领域似乎关注不够。在钱学森等老科学家的倡导下，我国学者在复杂巨系统和定性定量相结合的研究上已取得不少成果，有些成果应对计算机科学家有重要借鉴意义。</p>
<p>信息技术发展的历史证明：信息技术发展遵循简单性法则，过于复杂的技术往往被淘汰或变成脱离主流的技术，如Ada语言、数据流计算机、B-ISDN（宽带综合业务数字网络）技术等。互联网成功的原因之一在于KISS原则（Keep It Simple and Stupid）。<strong>我们应认真总结计算机的发展史，从中发现驾驭复杂性的规律，为计算机领域的技术创新导航。</strong></p>
<h2 id="计算机科学要为技术实现“化难为易”提供科学指南"><a href="#计算机科学要为技术实现“化难为易”提供科学指南" class="headerlink" title="计算机科学要为技术实现“化难为易”提供科学指南"></a>计算机科学要为技术实现“化难为易”提供科学指南</h2><p>以往的计算机科学为技术实现“化难为易”已经提供了一些科学指南，但是做得还不够。作为一门具有指导意义的科学，计算机科学应该做得更好一些。在“化难为易”方面，下面几个问题值得我们深思。</p>
<h3 id="1．降低问题复杂性的关键是选择合适的问题表述"><a href="#1．降低问题复杂性的关键是选择合适的问题表述" class="headerlink" title="1．降低问题复杂性的关键是选择合适的问题表述"></a>1．降低问题复杂性的关键是选择合适的问题表述</h3><p>我刚从美国回国工作时，有感于国内不重视不同于“计算方法”的算法研究，曾呼吁过国内要大力开展真正的算法研究，现在我感到要强调问题的另一面。一类问题的复杂性取决于它的问题表述（问题复杂性可能是计算机科学中很少有的不变量），只要问题表述没有改变，解决某一类问题的算法复杂性的下限就不可能改变。我们花了很多功夫优化算法，但却很少花功夫寻找合适的问题表述，可能是捡了芝麻丢了西瓜。有些所谓NP困难问题并不反映实际问题的本质“简单性”，比如识别人脸对人脑而言可能就是一个简单问题。我们不应研究人如何“绕过”了指数爆炸，而是要研究我们采用的人脸识别表述方法如何把我们引入了指数爆炸的歧路，我们需要做的事情是选择对人脸数据的简单描述的模式。</p>
<h3 id="2．改变问题分解的途径可大幅度提高问题求解效率"><a href="#2．改变问题分解的途径可大幅度提高问题求解效率" class="headerlink" title="2．改变问题分解的途径可大幅度提高问题求解效率"></a>2．改变问题分解的途径可大幅度提高问题求解效率</h3><p>我在美国做博士论文研究时，常常采用把一个问题分解成许多子问题的途径来解决复杂问题，这是计算机科学里最常用的Divide and Conquer方法。最近我的导师Benjamin Wan教授告诉我，对有些问题，他现在采用分解限制条件的办法比传统的子问题分解，求解效率可高出上千倍。有些实际问题，像机场的实时调度，可能有上百种限制条件。传统的求解方法是通过问题分解去缩小问题规模，如先分解到部门一级再综合。这样分解后的每一个子问题的复杂性并没有减少。但如果对限制条件进行分解，分解后的每个小问题只包含很少的限制，这样的小问题就极其简单，实际的求解效率可大大提高。</p>
<h3 id="3．虚拟化是化繁为简的关键技术"><a href="#3．虚拟化是化繁为简的关键技术" class="headerlink" title="3．虚拟化是化繁为简的关键技术"></a>3．虚拟化是化繁为简的关键技术</h3><p>一部计算机发展的历史可看作计算机技术不断虚拟化的历史。上世纪70年代，IBM 370首先使用虚拟计算机概念。1992年布特勒·兰普森在获得图灵奖时引用别人的话说过：“计算机科学中的任何问题都可以通过另外一个层次解决。”计算机产业的发展不可能完全做到先提出完美的顶层设计再按既定的标准发展，标准往往是在竞争中形成的。为了解决发展过程中互操作和兼容等问题，常常通过虚拟机的思路在更高的层次隐藏下一层的技术细节。<strong>我们要把虚拟机的思想理论化，使之成为计算机科学的重要内容。</strong></p>
<h2 id="计算机科学应重点突破技术发展的限制"><a href="#计算机科学应重点突破技术发展的限制" class="headerlink" title="计算机科学应重点突破技术发展的限制"></a>计算机科学应重点突破技术发展的限制</h2><h3 id="1．一味提高速度不是明智的选择"><a href="#1．一味提高速度不是明智的选择" class="headerlink" title="1．一味提高速度不是明智的选择"></a>1．一味提高速度不是明智的选择</h3><p>这些年来，计算机技术的高速发展得益于摩尔（Moore）定律，所以不少人言必称摩尔定律。其实，计算机技术的发展也受害于摩尔定律。CPU和计算机性能的不断提高，确实缓解了某些过去不容易解决的困难，但也掩盖了计算机科学中的一些基本矛盾，许多问题都指望通过计算机性能提高来解决。现在，<strong>芯片和计算机性能的提高已遇到功耗、可靠性和成本三面高墙，</strong>计算机科学应重点突破这些技术发展的限制。例如，像现在这样无限制地扩大芯片面积和集成度，一个芯片里集成几亿甚至几十亿个晶体管，造成功耗很大，成本不断增加，可靠性降低。近来许多专家都指出，一味地从提高芯片和计算机的速度上找出路不是一个明智的选择。</p>
<p>芯片器件的复杂性每年增长68％，到2018年单芯片内晶体管数预计将超过140亿个，而芯片设计能力（每个人月设计的晶体管数）每年只增长21％（CPU内大量的芯片面积只能用来做增值不高的缓存）。集成电路产业的瓶颈在芯片设计，若不能有效掌控芯片的复杂性，即使有了10纳米的新工艺，潜在的芯片能力也发挥不出来。怎样才能把芯片所能提供的能力尽量发掘出来，需要在计算机科学上有所突破。</p>
<h3 id="2．吸取工业化进程的教训"><a href="#2．吸取工业化进程的教训" class="headerlink" title="2．吸取工业化进程的教训"></a>2．吸取工业化进程的教训</h3><p>我们应该从过去工业化的进程中吸取教训。几十年前，不管是化工还是钢铁，我们的前辈在实现工业化的过程中，并没有认识到他们的做法有什么不对。现在，到了我们这一代，我们发现有很多不合理的地方：没有给我们留下一个美好的环境，污染严重，浪费资源等等。我担心再过50年，我们的后人说，21世纪初有那么一批很蠢的计算机科学家，他们搞的信息化造成很多问题，浪费了很多资源，对人类文明也是一种浪费。我想，<strong>与其将来被别人批判，还不如我们自己批判自己，走一条更加符合人类社会发展规律的道路</strong>。我们需要反思：计算机科学技术是不是也走了一些弯路，是否应该探索革命性的突破？</p>
<h2 id="计算机科学要寻求大的突破"><a href="#计算机科学要寻求大的突破" class="headerlink" title="计算机科学要寻求大的突破"></a>计算机科学要寻求大的突破</h2><p>计算机科学的发展已经到了相对成熟的阶段，如何继续向前发展是每一位计算机科学家需要认真思考的问题。我们需要摆脱过去已经取得的成就的拖累，提出新的发展思路。</p>
<h3 id="1．重新发明网络和操作系统"><a href="#1．重新发明网络和操作系统" class="headerlink" title="1．重新发明网络和操作系统"></a>1．重新发明网络和操作系统</h3><p>最近，美国国家自然基金会（NSF）在计算机和通信网络领域提出了新的研究方向，如投入3亿美金的GENI项目，值得我们注意。美国NSF网络和计算机领域的主管官员赵伟教授告诉我，他的基本思想是要reinvention, 一个是要发明新的网络，另一个是要发明新的操作系统。他们认为，改进互联网应该是思科等公司的事，NSF不必为大公司赚钱操心。当网络带宽达到10Tbps时，分组交换可能已不能有效地工作。现在的互联网只相当于邮政系统，NSF应致力于发明相当Express快件系统的新网络。在操作系统方面，NSF不应再支持研究Unix或Linux，而是要创造新的操作系统。</p>
<p>NSF的科研布局使我想起了美国麻省理工学院（MIT）的“不为”原则：<strong>“不做只要努力一定能成功的课题”</strong>，即要做没有成功把握的研究。我国863计划中有不少工程性很强的项目，要求一定成功是无可非议的。但即使是基金和973项目中，带有reinvention 性质的项目也不多。今后，我们需要做一些目前还不能保证成功的研究。</p>
<h3 id="2．内容处理已成为必须突破的核心技术"><a href="#2．内容处理已成为必须突破的核心技术" class="headerlink" title="2．内容处理已成为必须突破的核心技术"></a>2．内容处理已成为必须突破的核心技术</h3><p>当前，内容处理已成为网络浏览检索、软件集成（Web服务）、网格等计算机应用的瓶颈，语义处理也是下一代操作系统的核心技术。形形色色的软件技术最终都卡在语义上，语义处理已成为需要突破的关键技术。人工智能、模式识别等技术已有相当进展，但内容处理还处于重大技术突破的前夜，究竟什么时候能真正取得突破性的进展现在还难以预见。</p>
<p>冯·诺依曼的最大贡献是提出了在单台计算机上把程序视同为数据的程序存储式计算机模型，而语义研究的目标是在整个网络上实现将程序视同为数据。目前的浏览器已能做到不区分本地和远程的数据，将来可能实现的基于语义的操作系统应做到不区分本地和远程的程序。也就是说，<strong>我们的目标是实现广义的冯·诺依曼计算机，即联网的计算机真正变成一台计算机，在全球网络上实现程序等同于数据</strong>。这是计算机科学家梦寐以求的理想，我们要持之以恒地追求。</p>
<h2 id="计算机科学要成为提高办事效率与质量的“事理学”"><a href="#计算机科学要成为提高办事效率与质量的“事理学”" class="headerlink" title="计算机科学要成为提高办事效率与质量的“事理学”"></a>计算机科学要成为提高办事效率与质量的“事理学”</h2><h3 id="1．计算机科学本质上是”事理学”"><a href="#1．计算机科学本质上是”事理学”" class="headerlink" title="1．计算机科学本质上是”事理学”"></a>1．计算机科学本质上是”事理学”</h3><p>相对于研究物质结构原理的物理学，计算机科学本质上是研究做事效率和成本的“事理学”。所谓做事包括科学工程计算、事务处理、信息服务等各种人类想做的事情。</p>
<p>办事就要讲求章法、讲求系统、讲求组织，不仅仅是算法。盖一幢大楼，包括土木、水电、供暖等各种子系统，建筑公司可以做到相互配合井井有条；但编制大型软件失败的项目比比皆是，原因多半出在各部件和子系统无法协调配合。我们应不应该反思：计算机科学究竟缺了些什么？这里面可能有些根本性的规律我们没有掌握，怎么把一个事情做成功、做好，不仅仅是一个算法优化问题。</p>
<h3 id="2．关注服务科学"><a href="#2．关注服务科学" class="headerlink" title="2．关注服务科学"></a>2．关注服务科学</h3><p>最近，IBM公司提出一个新的目标，叫做服务科学（Service Sciences）。专家们认为，服务科学可以将计算机科学、运筹学、产业工程、数学、管理学、决策学、社会学和法律学在既定领域内融合在一起，创建新的技能和市场来提供高价值的服务。促进技术和商务更紧密结合需要新的技能和技能组合，这些技能和应用方法必须从大学起开始教授，创建“服务科学”学科的想法从此诞生。</p>
<p>在美国，整个服务行业创造的价值已占全部GDP的70%以上，服务也需要科学做指导。IBM提出的服务科学全称是SSME，即服务科学、管理和工程，将服务看成科学、管理和工程的结合，把计算机和商务紧密联系起来了。美国很多学校已经开设了服务科学课程，将来培养出来的就是美国的行业工程师。若干年前，当有人从计算机硬件软件中提炼出计算机科学时，不少人奚落嘲笑；<strong>现在服务科学刚刚出现地平线上，我们不应当挑剔它的幼稚，要以敏锐的洞察力捕捉先机。</strong></p>
<h2 id="计算机科学应成为跨领域的二元或多元科学"><a href="#计算机科学应成为跨领域的二元或多元科学" class="headerlink" title="计算机科学应成为跨领域的二元或多元科学"></a>计算机科学应成为跨领域的二元或多元科学</h2><h3 id="1．寻找被打断的“沟通链条”"><a href="#1．寻找被打断的“沟通链条”" class="headerlink" title="1．寻找被打断的“沟通链条”"></a>1．寻找被打断的“沟通链条”</h3><p>近代科学学科划分过细、条块分割，反而模糊了人们对事物的总体性、全局性的认识。德国著名的物理学家普朗克认为：“<strong>科学是内在的整体，它被分解为单独的部分不是取决于事物本身，而是取决于人类认识能力的局限性。实际上存在从物理到化学，通过生物学和人类学到社会学的连续的链条，这是任何一处都不能被打断的链条</strong>”。</p>
<p>早在100多年前，马克思在《经济学–哲学手稿》中曾预言：“<strong>自然科学往后将会把关于人类的科学总括在自己下面，正如同关于人类的科学把自然科学总括在自己下面一样，它将成为一个科学。</strong>”面对着越来越复杂的问题，许多研究者开始探索从整体出发的研究方法，试图寻找那条被打断的“沟通链条”。</p>
<h3 id="2．形成跨领域的二元或多元计算机科学"><a href="#2．形成跨领域的二元或多元计算机科学" class="headerlink" title="2．形成跨领域的二元或多元计算机科学"></a>2．形成跨领域的二元或多元计算机科学</h3><p>计算机科学需要强调与自然科学、社会科学的交叉，应该成为跨领域的二元或多元科学。将计算机学科分成科学与工程已不合时宜，南加州大学不再按照体系结构作分界线区分计算机科学和计算机工程，而是按分析与综合分类的新框架做区分，以分析为主的叫科学，以综合为主的叫工程，计算机科学主要内容是跨学科的分析，计算机工程主要从事面向系统的综合。计算机科学要大大加强与物理学、生命科学及社会科学的交叉研究，形成计算物理学、计算生物学、社会计算等新学科，还可以形成“计算机+生命+物理”、“计算机+生命+社会”等三元交叉科学。这些交叉学科不仅仅是计算机的应用扩展，而是我们需要高度重视的计算机科学的未来主流方向。要做好这些交叉学科研究，必须加强以超级计算机为基础的计算机模拟与仿真。我们不能认为在Computer+X的交叉学科中，计算机只不过是一个工具。实际上这是若干新的科学，<strong>它既不是传统的计算机科学，也不是原来的<strong><strong>X</strong></strong>学，而是把这两方面或几方面融合起来的新科学</strong>。</p>
<p>计算机的发展对未来人类社会也将有重大影响。计算机科学家不但要和其他领域的自然科学家合作，还需要和社会学、经济学、新闻传播等方面的社会科学家更密切地合作。总之，<strong>今后计算机科学的研究，不能完全像过去一样走越分越细的以归约还原为主的道路，应当考虑走一条强调综合集成的新道路。</strong></p>
<h2 id="对计算机学科教育的反思"><a href="#对计算机学科教育的反思" class="headerlink" title="对计算机学科教育的反思"></a>对计算机学科教育的反思</h2><p>和美国NSF信息学部主任赵伟教授的一次对话引起我一些反思，赵伟教授认为，美国学科教育的发展有不同模式，有些封闭保守，有些开放包容。美国较好的学科教育发展模式可能是医学院和法学院，所有相关的知识都吸纳在本学院里，其他的学院一般不教医学和法律课程。工程学科也有较好的吸纳性，其他学院一般不会开设电路设计课。但计算机学科是发散的学科，其他学院可开设各种与计算机有关的课程。计算机科学会不会像数学一样把相关的知识都推出去，只剩下很少的内容？计算机学院将来教什么课？</p>
<p>我国一些计算机教育专家也发现了同样的问题，他们担心计算机科学将逐步变成与现在数学差不多成为一门公共课。其实，如上所述，计算机科学方兴未艾，还有许多计算机科学应该重视的内容尚没有我们进入我们的视野，尤其是<strong>计算机科学与自然科学、社会科学的交叉将会大大充实计算机科学的内涵。我们真应当好好梳理一下，不要懵懵懂懂把计算机科学引入了很窄的死胡同。</strong></p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>本文有些观点是在与美国NSF信息学部主任赵伟教授及其他学者讨论中形成的，在此一并表示感谢。</p>
]]></content>
      <tags>
        <tag>publication</tag>
        <tag>blog</tag>
        <tag>文摘</tag>
      </tags>
  </entry>
</search>
